<!DOCTYPE html>
<!-- saved from url=(0068)http://mrdoob.github.com/three.js/examples/canvas_geometry_cube.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>Poli Chat 3D</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0;">
		<style type="text/css">
			body {
				font-family: Monospace;
				background-color: #f0f0f0;
				margin: 0px;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

		<script type="text/javascript" src="../../libs/Three.js"></script>

		<script type="text/javascript" src="../../libs/RequestAnimationFrame.js"></script>
		<script type="text/javascript" src="../../libs/Stats.js"></script>
		<script type="text/javascript" src="Camera.js"></script>
		<script type="text/javascript" src="Personagem.js"></script>		

		<script type="text/javascript">

			var container, stats;

			var camera, scene, renderer;

			var personagem, plane;

			var targetRotation = 0;
			var targetRotationOnMouseDown = 0;

			var mouseX = 0;
			var mouseXOnMouseDown = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			
			
			var loader;

			init();
			animate();
			
			
			function createScene( geometry, scale ) 
			{
				var m = new THREE.MeshFaceMaterial();
			
				//geometry.computeTangents();

				mesh1 = THREE.SceneUtils.addMesh( scene, geometry, scale, 0, - 50, 0, 0, 0, 0, m );

				//loader.statusDomElement.style.display = "none";

			}

			function init() 
			{
				container = document.createElement( 'div' );
				document.body.appendChild( container );

				var info = document.createElement( 'div' );
				info.style.position = 'absolute';
				info.style.top = '10px';
				info.style.width = '100%';
				info.style.textAlign = 'center';
				info.innerHTML = 'PoliChat3D';
				container.appendChild( info );

			

				scene = new THREE.Scene();

				// Cube

				var materials = [];

				for ( var i = 0; i < 6; i ++ ) 
				{
					materials.push( [ new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } ) ] );
				}
				
				
				//personagem
				personagem = new Personagem();
				personagem.inicializar();
				scene.addObject( personagem.getCube() );

				// Plane

				plane = new THREE.Mesh( new THREE.Plane( 200, 200 ), new THREE.MeshBasicMaterial( { color: 0xe0e0e0 } ) );
				plane.rotation.x = - 90 * ( Math.PI / 180 );
				plane.position.y = -110;
				plane.overdraw = true;
				
				var cubo2 = new THREE.Mesh( new THREE.Cube( 500, 200, 500, 1, 1, 1, materials ), new THREE.MeshFaceMaterial() );
				cubo2.position.y = 0;
				cubo2.position.z = -800;
				cubo2.overdraw = true;
				
				var cubo3 = new THREE.Mesh( new THREE.Cube( 500, 200, 500, 1, 1, 1, materials ), new THREE.MeshFaceMaterial() );
				cubo3.position.y = 0;
				cubo3.position.x = -800;
				cubo3.overdraw = true;
				
				var cubo4 = new THREE.Mesh( new THREE.Cube( 500, 200, 500, 1, 1, 1, materials ), new THREE.MeshFaceMaterial() );
				cubo4.position.y = 0;
				cubo4.position.x = 800;
				cubo4.overdraw = true;				
				
				scene.addObject( plane );
				scene.addObject( cubo2 );
				scene.addObject( cubo3 );
				scene.addObject( cubo4 );

				renderer = new THREE.CanvasRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );

				container.appendChild( renderer.domElement );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );

				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );
				document.addEventListener( 'keydown', onDocumentKeyDown, false );
				document.addEventListener( 'keyup', onDocumentKeyUp, false );
				
				// inicialização da câmera
				camera = new Camera();

			}

			

			function onDocumentKeyUp(event) 
			{
				if(String.fromCharCode(event.keyCode) == "A")
					personagem.setDirecaoX(0);
				else if(String.fromCharCode(event.keyCode) == "D")
					personagem.setDirecaoX(0);
				else if(String.fromCharCode(event.keyCode) == "W")
					personagem.setDirecaoZ(0);
				else if(String.fromCharCode(event.keyCode) == "S")
					personagem.setDirecaoZ(0);
			}
			
			function onDocumentKeyDown(event)
			{
				if(String.fromCharCode(event.keyCode) == "A")
					personagem.setDirecaoX(-1);
				else if(String.fromCharCode(event.keyCode) == "D")
					personagem.setDirecaoX(1);
				else if(String.fromCharCode(event.keyCode) == "W")
					personagem.setDirecaoZ(-1);
				else if(String.fromCharCode(event.keyCode) == "S")
					personagem.setDirecaoZ(1);
					
				direcaoNormalize();
			}

			function onDocumentMouseDown( event ) {

				event.preventDefault();

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mouseup', onDocumentMouseUp, false );
				document.addEventListener( 'mouseout', onDocumentMouseOut, false );

				mouseXOnMouseDown = event.clientX - windowHalfX;
				targetRotationOnMouseDown = targetRotation;

			}

			function onDocumentMouseMove( event ) {

				mouseX = event.clientX - windowHalfX;
				targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;
			}

			function onDocumentMouseUp( event ) {

				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			}

			function onDocumentMouseOut( event ) {
				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );
			}
			
			function onDocumentTouchStart( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();
					mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
					targetRotationOnMouseDown = targetRotation;

				}
			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.05;

				}
			}

			
			function movimento()
			{
				personagem.atualizar();
				camera.atualizar(personagem.getCube());
			}
			
			function animate() {
				
				movimento();
				requestAnimationFrame( animate );
				render();
				stats.update();

			}
			
			function render() {

				personagem.getCube().rotation.y += ( targetRotation - personagem.getCube().rotation.y ) * 0.05;
				renderer.render( scene, camera.getThreeCam() );

			}

		</script>
		<div>
			<div style="position: absolute; top: 10px; width: 100%; text-align: center; ">
			</div>
			<canvas width="928" height="508"></canvas>
			<div style="cursor: pointer; width: 80px; opacity: 0.9; z-index: 10001; position: absolute; top: 0px; ">
				<div style="background-color: rgb(8, 8, 24); padding-top: 2px; padding-right: 0px; padding-bottom: 3px; padding-left: 0px; ">
					<div style="font-family: Helvetica, Arial, sans-serif; text-align: left; font-size: 9px; color: rgb(0, 255, 255); margin-top: 0px; margin-right: 0px; margin-bottom: 1px; margin-left: 3px; ">
						<span style="font-weight:bold">58 FPS</span> 
						(55-60)
					</div>
					<canvas width="74" height="30" style="display: block; margin-left: 3px; ">
					</canvas></div><div style="background-color: rgb(8, 24, 8); padding-top: 2px; padding-right: 0px; padding-bottom: 3px; padding-left: 0px; display: none; ">
					<div style="font-family: Helvetica, Arial, sans-serif; text-align: left; font-size: 9px; color: rgb(0, 255, 0); margin-top: 0px; margin-right: 0px; margin-bottom: 1px; margin-left: 3px; ">
						<span style="font-weight:bold">17 MS</span> 
						(8-65)
					</div>
					<canvas width="74" height="30" style="display: block; margin-left: 3px; "></canvas>
				</div>
				<div style="background-color: rgb(24, 8, 13); padding-top: 2px; padding-right: 0px; padding-bottom: 3px; padding-left: 0px; display: none; ">
					<div style="font-family: Helvetica, Arial, sans-serif; text-align: left; font-size: 9px; color: rgb(255, 0, 128); margin-top: 0px; margin-right: 0px; margin-bottom: 1px; margin-left: 3px; ">
						<span style="font-weight:bold">MEM</span>
					</div>
					<canvas width="74" height="30" style="display: block; margin-left: 3px; "></canvas>
				</div>
			</div>
		</div>		

	

</body></html>